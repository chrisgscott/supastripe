We are using the APP ROUTER, not pages router for NextJS.
We are using @supabase/ssr, NOT auth-helpers-nextjs. Never use auth-helpers-nextjs in our code. See docs at https://supabase.com/docs/guides/auth/server-side/nextjs for details.

We recently made changes to a substantial portion of our app and I’d like your help updating our files to fit the new database structure, payment plan creation flow, API routes and backend processes.

Here are the most important things to consider, please be sure to check all of them as we proceed with making our changes:

## Payment Plan Creation Flow
1. As before, the @NewPlanWizard.tsx and @NewPlanContext.tsx files control the flow of the new payment plan creation process.
2. We start on the @PlanDetailsForm.tsx, where we fill in the form. The form validates our inputs but **does not** do any currency formatting or conversions. It’s important that we’re able to enter dollars and cents into the form without it being formatted or converted within the form.
3. Submitting the PlanDetailsForm triggers the @create-downpayment-intent-and-pending-records API route.
4. The create-downpayment-intent-and-pending-records API route starts a database transaction, generates our randomUUIDs for the pending customer, pending payment plan, pending transaction and the idempotency key before getting the stripe connect connected account id and checking to see if a customer already exists in the database. Finally, it convers our payment schedule amounts into cents to be stored in the database and does a final check on the transaction types.
5. From there, the API route triggers our create_pending_payment_records function: 
```

  
DROP FUNCTION IF EXISTS create_pending_payment_records(uuid,uuid,uuid,text,text,uuid,integer,integer,text,integer,jsonb,text,uuid,jsonb);

CREATE OR REPLACE FUNCTION create_pending_payment_records(
    p_customer_id UUID,
    p_payment_plan_id UUID,
    p_transaction_id UUID,
    p_customer_name TEXT,
    p_customer_email TEXT,
    p_user_id UUID,
    p_total_amount INTEGER,
    p_number_of_payments INTEGER,
    p_payment_interval TEXT,
    p_downpayment_amount INTEGER,
    p_payment_schedule JSONB,
    p_stripe_customer_id TEXT,
    p_idempotency_key UUID,
    p_notes JSONB
) RETURNS uuid AS $$
BEGIN
    -- Create pending customer record
    INSERT INTO pending_customers (
        id,
        name,
        email,
        user_id,
        stripe_customer_id
    )
    VALUES (
        p_customer_id,
        p_customer_name,
        p_customer_email,
        p_user_id,
        p_stripe_customer_id
    );

    -- Create pending payment plan
    INSERT INTO pending_payment_plans (
        id,
        customer_id,
        user_id,
        total_amount,
        number_of_payments,
        payment_interval,
        downpayment_amount,
        status,
        idempotency_key,
        notes
    )
    VALUES (
        p_payment_plan_id,
        p_customer_id,
        p_user_id,
        p_total_amount,
        p_number_of_payments,
        p_payment_interval::payment_interval_type,
        p_downpayment_amount,
        'pending_payment',
        p_idempotency_key,
        p_notes
    );

    -- Create pending transactions
    INSERT INTO pending_transactions (
        id,
        payment_plan_id,
        amount,
        due_date,
        status,
        transaction_type
    )
    SELECT
        CASE 
            WHEN value->>'transaction_type' = 'downpayment' THEN p_transaction_id
            ELSE gen_random_uuid()
        END,
        p_payment_plan_id,
        (value->>'amount')::INTEGER,
        (value->>'date')::TIMESTAMP,
        'pending',
        (value->>'transaction_type')::transaction_type
    FROM jsonb_array_elements(p_payment_schedule);

    -- Return the payment plan ID
    RETURN p_payment_plan_id;

EXCEPTION WHEN OTHERS THEN
    RAISE;
END;
$$ LANGUAGE plpgsql;


6. That database function creates all of our pending records in pending_customers, pending_payment_plans and pending_transactions.
7. From there, our API route creates a stripe payment intent and, assuming everything works up to that point, commits the database transaction or rollsback if there are any errors.
8. From there, we’re sent over to the new @PaymentMethodChoice.tsx file where the user chooses whether to Collect Payment Now or Send Payment Link. Collect Payment Now follows our usual payment flow, sending the user to the @StripePaymentForm step. Send Payment Link triggers the @send-payment-link API route, which sends an email to the customer with a link to t he @pay page.
9. From here, we’re sent over to the @/plan/[id] page as our confirmation page.
10. When the first payment is processed (whether that’s a downpayment or an installment payment doesn’t matter, just whatever the first transaction is) and we get a success notification from Stripe, we fire off the @handle-payment-confirmation API route, which begins a database transaction, fetches the stripe payment intent, gets the pending payment plan, updates the first transaction status to ‘completed’, updates the pending payment plan status to ‘ready_to_migrate’, creates an email log for the payment and triggers our migrate_pending_payment_plan database function:
```
DROP FUNCTION IF EXISTS public.handle_payment_confirmation(
    uuid,    -- p_pending_plan_id
    text,    -- p_payment_intent_id
    uuid,    -- p_idempotency_key
    text,    -- p_card_last_four
    text     -- p_card_expiration
);
CREATE OR REPLACE FUNCTION public.handle_payment_confirmation(
    p_pending_plan_id uuid,
    p_payment_intent_id text,
    p_idempotency_key uuid,
    p_card_last_four text,
    p_card_expiration_month integer,
    p_card_expiration_year integer
) RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_first_transaction_id UUID;
    v_migrated_plan_id UUID;
    v_user_id UUID;
    v_customer_email TEXT;
BEGIN
    RAISE NOTICE 'Starting handle_payment_confirmation for pending plan: %', p_pending_plan_id;

    -- Get the user_id and customer email first
    SELECT 
        ppp.user_id, 
        pc.email INTO v_user_id, v_customer_email
    FROM pending_payment_plans ppp
    JOIN pending_customers pc ON pc.id = ppp.customer_id
    WHERE ppp.id = p_pending_plan_id;

    IF NOT FOUND THEN
        RAISE NOTICE 'Pending plan not found: %', p_pending_plan_id;
        RETURN jsonb_build_object(
            'success', false,
            'error', 'Pending plan not found'
        );
    END IF;

    RAISE NOTICE 'Found user_id: %, customer_email: %', v_user_id, v_customer_email;

    -- Update the first transaction status to completed
    UPDATE pending_transactions 
    SET status = 'completed',
        paid_at = NOW(),
        stripe_payment_intent_id = p_payment_intent_id
    WHERE payment_plan_id = p_pending_plan_id
    AND transaction_type = 'downpayment'
    RETURNING id INTO v_first_transaction_id;

    IF v_first_transaction_id IS NULL THEN
        RAISE NOTICE 'No downpayment transaction found for plan: %', p_pending_plan_id;
        RETURN jsonb_build_object(
            'success', false,
            'error', 'Downpayment transaction not found'
        );
    END IF;

    RAISE NOTICE 'Updated downpayment transaction: %', v_first_transaction_id;

    -- Update the pending payment plan status and card details
    UPDATE pending_payment_plans 
    SET status = 'ready_to_migrate',
        status_updated_at = NOW(),
        card_last_four = p_card_last_four,
        card_expiration_month = p_card_expiration_month,
        card_expiration_year = p_card_expiration_year
    WHERE id = p_pending_plan_id;

    RAISE NOTICE 'Updated pending payment plan status and card details';

    -- Create email log
    INSERT INTO email_logs (
        email_type,
        status,
        related_id,
        related_type,
        idempotency_key,
        recipient_email,
        user_id
    ) VALUES (
        'payment_confirmation',
        'pending',
        v_first_transaction_id,
        'transaction',
        p_idempotency_key,
        v_customer_email,
        v_user_id
    );

    RAISE NOTICE 'Created email log entry';

    -- Migrate the data (card details will be copied as part of the migration)
    v_migrated_plan_id := migrate_pending_payment_plan(p_pending_plan_id);
    RAISE NOTICE 'Migrated plan, new ID: %', v_migrated_plan_id;

    IF v_migrated_plan_id IS NULL THEN
        RAISE NOTICE 'Migration failed - migrated_plan_id is NULL';
        RETURN jsonb_build_object(
            'success', false,
            'error', 'Migration failed'
        );
    END IF;

    -- Verify the payment plan exists with card details
    IF NOT EXISTS (
        SELECT 1 
        FROM payment_plans 
        WHERE id = v_migrated_plan_id
        AND card_last_four IS NOT NULL
        AND card_expiration_month IS NOT NULL
        AND card_expiration_year IS NOT NULL
    ) THEN
        RAISE NOTICE 'Migration verification failed - plan not found or missing card details';
        RETURN jsonb_build_object(
            'success', false,
            'error', 'Failed to verify migrated payment plan'
        );
    END IF;

    RAISE NOTICE 'Migration verified successfully';

    -- Clean up pending records
    PERFORM cleanup_pending_payment_records(p_pending_plan_id);
    RAISE NOTICE 'Cleaned up pending records';

    -- Return success result
    RETURN jsonb_build_object(
        'success', true,
        'migrated_plan_id', v_migrated_plan_id
    );

EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'Error in handle_payment_confirmation: %', SQLERRM;
    RETURN jsonb_build_object(
        'success', false,
        'error', SQLERRM
    );
END;
$$;


Here's the migration database function that is triggered from the handle_payment_confirmation database function:
CREATE OR REPLACE FUNCTION migrate_pending_payment_plan(p_pending_plan_id UUID)
RETURNS UUID
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_new_plan_id UUID;
    v_new_customer_id UUID;
    v_user_id UUID;
    v_customer_count INT;
    v_transaction_count INT;
    v_payment_intent_id TEXT;
BEGIN
    -- Get the user_id and payment_intent_id first
    SELECT 
        ppp.user_id,
        pt.stripe_payment_intent_id INTO v_user_id, v_payment_intent_id
    FROM pending_payment_plans ppp
    JOIN pending_transactions pt ON pt.payment_plan_id = ppp.id
    WHERE ppp.id = p_pending_plan_id
    AND pt.transaction_type = 'downpayment';

    IF v_user_id IS NULL THEN
        RAISE EXCEPTION 'Pending payment plan not found: %', p_pending_plan_id;
    END IF;

    -- First, migrate the customer
    INSERT INTO customers (
        id,
        name,
        email,
        user_id,
        stripe_customer_id,
        created_at,
        updated_at
    )
    SELECT 
        gen_random_uuid(),
        pc.name,
        pc.email,
        v_user_id,
        pc.stripe_customer_id,
        CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP
    FROM pending_customers pc
    JOIN pending_payment_plans ppp ON pc.id = ppp.customer_id
    WHERE ppp.id = p_pending_plan_id
    RETURNING id INTO v_new_customer_id;

    IF v_new_customer_id IS NULL THEN
        RAISE EXCEPTION 'Failed to migrate customer for plan: %', p_pending_plan_id;
    END IF;

    -- Next, migrate the payment plan
    INSERT INTO payment_plans (
        id,
        user_id,
        customer_id,
        total_amount,
        downpayment_amount,
        number_of_payments,
        payment_interval,
        notes,
        status,
        card_last_four,
        card_expiration_month,
        card_expiration_year,
        created_at,
        updated_at,
        status_updated_at
    )
    SELECT 
        gen_random_uuid(),
        v_user_id,
        v_new_customer_id,
        total_amount,
        downpayment_amount,
        number_of_payments,
        payment_interval,
        notes,
        'active'::payment_status_type,
        card_last_four,
        card_expiration_month,
        card_expiration_year,
        CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP
    FROM pending_payment_plans
    WHERE id = p_pending_plan_id
    RETURNING id INTO v_new_plan_id;

    IF v_new_plan_id IS NULL THEN
        RAISE EXCEPTION 'Failed to migrate payment plan: %', p_pending_plan_id;
    END IF;

    -- Finally, migrate the transactions
    WITH inserted_transactions AS (
        INSERT INTO transactions (
            id,
            payment_plan_id,
            user_id,
            amount,
            due_date,
            transaction_type,
            status,
            stripe_payment_intent_id,
            paid_at,
            created_at,
            updated_at,
            next_attempt_date
    )
        SELECT 
            gen_random_uuid(),
            v_new_plan_id,
            v_user_id,
            pt.amount,
            pt.due_date,
            pt.transaction_type,
            CASE 
                WHEN pt.transaction_type = 'downpayment' THEN 'completed'
                ELSE 'pending'
            END::transaction_status_type,
            CASE 
                WHEN pt.transaction_type = 'downpayment' THEN v_payment_intent_id
                ELSE NULL
            END,
            CASE 
                WHEN pt.transaction_type = 'downpayment' THEN CURRENT_TIMESTAMP
                ELSE NULL
            END,
            CURRENT_TIMESTAMP,
            CURRENT_TIMESTAMP,
            CASE 
                WHEN pt.status = 'failed' THEN pt.due_date + INTERVAL '2 days'
                ELSE NULL
            END
        FROM pending_transactions pt
        WHERE pt.payment_plan_id = p_pending_plan_id
        RETURNING id
    )
    SELECT COUNT(*) INTO v_transaction_count FROM inserted_transactions;

    IF v_transaction_count = 0 THEN
        RAISE EXCEPTION 'No transactions migrated for plan: %', p_pending_plan_id;
    END IF;

    -- Verify the migration
    SELECT COUNT(*) INTO v_customer_count
    FROM customers
    WHERE id = v_new_customer_id;

    IF v_customer_count = 0 THEN
        RAISE EXCEPTION 'Failed to verify migrated customer: %', v_new_customer_id;
    END IF;

    RETURN v_new_plan_id;

EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'Error in migrate_pending_payment_plan: %', SQLERRM;
    RAISE;
END;
$$;

```
11. If all of that is successful, we clean up the pending records with a database function (cleanup_pending_payment_records) and commit the database transaction.

Here's that function:
CREATE OR REPLACE FUNCTION cleanup_pending_payment_records(p_pending_plan_id UUID)
RETURNS void AS $$
DECLARE
    v_customer_id UUID;
BEGIN
    -- Store the customer_id before any deletions
    SELECT customer_id INTO v_customer_id
    FROM pending_payment_plans
    WHERE id = p_pending_plan_id;

    -- Delete pending transactions first (due to foreign key constraints)
    DELETE FROM pending_transactions
    WHERE payment_plan_id = p_pending_plan_id;

    -- Delete the pending payment plan
    DELETE FROM pending_payment_plans
    WHERE id = p_pending_plan_id;

    -- Delete the pending customer if no other pending plans reference it
    IF v_customer_id IS NOT NULL THEN
        DELETE FROM pending_customers
        WHERE id = v_customer_id
        AND NOT EXISTS (
            SELECT 1 
            FROM pending_payment_plans 
            WHERE customer_id = v_customer_id
        );
    END IF;

EXCEPTION WHEN OTHERS THEN
    -- Log the error details
    RAISE NOTICE 'Error cleaning up pending records: %', SQLERRM;
    -- Re-raise the error
    RAISE;
END;
$$ LANGUAGE plpgsql;

12. We now have our new “live” customer, payment plan and transactions (along with their related email and payment logs) on our “live” database tables.
   
## Database Structure
1. Check all types, database tables and column names to make sure they work seamlessly with our new database structure as detailed in @supabase.ts. This is vital. Don’t guess. Look at the file and compare it to our code.
2. We’re no longer using “is_downpayment”. We’re now using “transaction_type”. You can find the valid types in @supabase.ts
3. We’ve removed the payment_plan_stages table altogether since we’re now tracking status by whether the records are on the pending_ tables vs the “live” tables and within the “status” column of the given table. No need for that payment plan stage table anymore.
4. We have detailed enum definitions in @supabase.ts. Please use this reference to be sure everything matches.

## Currency Formatting and Conversion
When possible, **always** use our @currencyUtils.ts file for doing all formatting and conversion of money. We always show dollars and cents on the frontend and always store money as cents in our database.

## Misc. Notes
- Always make sure we’re using Stripe Connect and that payments are routed to the connected stripe account and our application fee is being collected and routed to us properly.
- Always make sure we’re using setup_future_usage as off_session so we can store the payment method (credit card details) to the stripe customer.

## Payment Plan Query Patterns

Different API routes handle payment plans in different ways depending on their purpose:

### Single Plan Operations
These routes deal with one payment plan at a time and should use !inner or !customer_id to get a single customer object:

1. send-payment-link/route.ts - Fetches a single plan with its customer for email sending
2. handle-card-update/route.ts - Updates card details for a single plan
3. send-payment-plan-email/route.ts - Sends email for a single plan
4. get-plan-details/[id]/route.ts - Fetches detailed plan info for the plan details page

### Multiple Plan Operations
These routes deal with arrays of payment plans and their relationships:

1. payment-plans/route.ts - Fetches all plans for the table view

### Database Relationships
Payment Plans to Customers is a Many-to-One relationship:
- Each payment plan has exactly one customer (enforced by customer_id foreign key)
- Each customer can have multiple payment plans
- Same relationship applies to pending_payment_plans and pending_customers
- We never need to handle arrays of customers since each plan has exactly one customer

### Query Guidelines
1. When querying a single payment plan (use .single() or .maybeSingle()):
   ```sql
   customer:customers!customer_id (
     id,
     name,
     email
   )
   ```

2. When querying multiple payment plans:
   ```sql
   customer:customers!inner (
     id,
     name
   )
   ```

3. For pending plans, use the same pattern with pending_ prefix:
   ```sql
   pending_customer:pending_customers!customer_id (
     id,
     name,
     email
   )
   ```

### Type Definitions
Your types should reflect these relationships:
```typescript
interface PaymentPlanResponse {
  customer: {  // Not an array
    id: string
    name: string
  }
}

interface PendingPaymentPlanResponse {
  pending_customer: {  // Not an array
    id: string
    name: string
  }
}
```

Example Implementations:
- Single plan query: see send-payment-link/route.ts (startLine: 71, endLine: 91)
- Multiple plans query: see payment-plans/route.ts (startLine: 57, endLine: 73)
- Type definitions: see payment-plans/route.ts (startLine: 9, endLine: 39)
```
